//
//  MovieListPresenter.swift
//  movieApp
//
//  Created by Carlos Torres Sanchez on 6/26/19.
//  Copyright (c) 2019 Carlos Torres Sanchez. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class MovieListPresenter {

    // MARK: - Private properties -

    private unowned let view: MovieListViewInterface
    private let interactor: MovieListInteractorInterface
    private let wireframe: MovieListWireframeInterface

    // MARK: - Lifecycle -

    init(view: MovieListViewInterface, interactor: MovieListInteractorInterface, wireframe: MovieListWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        MovieListInteractor.presenterDelegate = self
      
    }
}

// MARK: - Extensions -

extension MovieListPresenter: MovieListPresenterInterface {
  func requestMoviesByScopeIndex(index: Int) {
    switch index {
    case MovieCategoryConstants.popular:
      interactor.requestMovies(with: "popular")
      break
    case MovieCategoryConstants.topRated:
      interactor.requestMovies(with: "top_rated")
      break
    case MovieCategoryConstants.upcoming:
      interactor.requestMovies(with: "upcoming")
      break
    default:
      break
      
    }
    
  }
  
  func requestMovies(with category: String) {
    interactor.requestMovies(with: category)
  }
  
}

extension MovieListPresenter:MovieListInteractorOutputDelegate{
  func onMoviesFetched(with movies: Movies) {
    view.showMovies(with: movies)
  }
  
  
}
